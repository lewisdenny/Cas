#!/bin/bash

function retrieveToken(){
  #echo "retrieveToken"
  #Generate bearer token to authenticate against the Hydra endpoint
  token=`curl $curlOption -s -k -d "username=$accessUsername&password=$accessPassword&grant_type=password&client_id=hydra-client-cli" https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token | sed 's/.*access_token":"\([^"]*\).*/\1/'`
  #Exit if there was an error with the user credentials
  #TODO: Add check for invalid_grant error message
  if [[ "$token" == *"Invalid user credentials"* ]]
  then
    echo "Invalid user credentials"
    exit 1
  fi
  #else cache the token to be used for the next 15 minutes
  echo $token >~/.hydratoken
}

#Collect all case numbers using the search parameters provided with -id and -s
function retrieveCaseNumbers () {
  if [ ! -z "$limit" ]
  then 
    #echo "entered: $limit"
    timeUnit=`echo $limit | grep -o -E "[a-z]+"` 
    #echo "Unit: $timeUnit"
    timeNumber=`echo $limit | grep -o -E "[0-9]+"`
    #echo "Time Value: $timeNumber"
    case $timeUnit in
      h | hour | hours )
        timeInHours=$timeNumber
        ;;
      d | day | days )
        timeInHours=`expr $(echo $timeNumber) \\* 24`
        ;;
      w | week | weeks )
        timeInHours=`expr $(echo $timeNumber) \\* 168`
        ;;
      m | month | months )
        timeInHours=`expr $(echo $timeNumber) \\* 730`
        ;;
      y | year | years )
        timeInHours=`expr $(echo $timeNumber) \\* 8760`
        ;;
    esac
    #echo "timeInHours: $timeInHours"
    timeLimit="AND Hours_Since_Case_Last_Updated__c < $timeInHours"
  fi
  token=`cat ~/.hydratoken`
  query="SELECT CaseNumber FROM Case WHERE SBR_Group__c INCLUDES  ('$SBR') AND Account.AccountNumber = '$AccountNum' $timeLimit\",\"identifier\":\"NumberOfRecord"
  casesForAccountNumber=`curl -s $curlOption 'https://access.redhat.com/hydra/rest/soql' \
  -H 'Content-Type: application/json' \
  -H "Authorization:Bearer $token" \
  -H 'Origin: https://access.redhat.com' \
  --data-raw $"[{\"query\":\"$query\"}]"`
}

#Using the collected case numbers pull the attachments file name, date created and URL
function retrieveCaseAttachments () {
  ######################################
  #https://stackoverflow.com/a/3330834 #
  ######################################
  sp="/-\|"
  sc=0
  function spin() {
     printf "\b${sp:sc++:1}"
     ((sc==${#sp})) && sc=0
  }
  function endspin() {
     printf "\r%s\n" "$@"
  }
  #######################################

  caseCount="1"
  caseNumbers=`echo $casesForAccountNumber | jq -r .'[].records[].CaseNumber'`
  quantityOfCaseNumbers=`echo $casesForAccountNumber | jq -r .'[].records[].CaseNumber'| wc -l`
  for caseNumber in $caseNumbers
  do
    response=`curl -s $curlOption "https://access.redhat.com/hydra/rest/cases/$caseNumber/attachments/" \
    -H 'Content-Type: application/json' \
    -H "Authorization:Bearer $token"`
    attachmentQuantity=`expr $(echo $response | jq -r '.[].fileName' | wc -l) - 1`
    
    #Loop through attachments on the case pulling out file name and URL
    index="0"
    while [ "$index" -le "$attachmentQuantity" ]
    do
      attachmentFileName=`echo $response | jq -r ".[$index].fileName"`
      attachmentLink=`echo $response | jq -r ".[$index].link"`
      attachmentCreatedDate=`echo $response | jq -r ".[$index].createdDate" | cut -f1 -dT`
      #echo $attachmentCreatedDate
      if [ "$enableLink" -eq "1" ]
      then
        lineToPrint="$caseNumber $attachmentCreatedDate $attachmentFileName $attachmentLink"
      else
        lineToPrint="$caseNumber $attachmentCreatedDate $attachmentFileName"
      fi
      
      if [ -n "$filter" ]
      then
        printf "$lineToPrint\n" | grep --colour $grepOption "$filter"
      else
        printf "$lineToPrint\n"
      fi
    index=$[$index+1]
    spin
    echo -ne "  Searching attachment $index in case $caseCount/$quantityOfCaseNumbers \r"
    done
    caseCount=$[$caseCount+1]
  done
  endspin
}

#TODO: Put into order
function help () {
  printf "Usage:\n  cas [CREDENTIALS] [OPTIONS]\n"
  printf "\n"
  printf "Example:\n  cas --username \$user --password \$pass --sbr Stack --customer-account-id 1445807 --limit 10months --ignore-case --filter \"SearchString\" \n"
  printf "\n"
  printf "[CREDENTIALS]\n"
  printf "  -u,  --username               access.redhat.com username\n"
  printf "  -p,  --password               access.redhat.com password\n"
  printf "\n"
  printf "[OPTIONS]\n"
  printf "  -s,  --sbr                    SBR you would like to search in\n"
  printf "  -id, --customer-account-id    Customers account ID\n"
  printf "  -f,  --filter                 Filter on attachment details\n"
  printf "  -h,  --help                   This help screen\n"
  printf "  -l,  --limit                  Limit case results to cases opened x hours ago\n"
  printf "                                h|hours, d|days, w|weeks, m|months, or y|years can be used\n"
  printf "  -L,  --link                   Enables links to the attachments\n"
  printf "  -i,  --ignore-case            Ignore case distinctions\n"
  printf "  -v,  --verbose                Enables verbose on all curl commands\n"
}

#Defaults
enableLink="0"
curlOption=""
filter=""
timeLimit=""
#AND Hours_Since_Case_Last_Updated__c < $hours

#####
#https://github.com/sormy/aws-curl/blob/7cd6a9ae53ac493a7cd5eba857e19d92be6c97d5/aws-curl#L333-L382
#####
quantityOfArgs="$#"
while [ "$#" != 0 ]
do
  case $1 in
    -L | --link )
        enableLink="1"
        shift
        ;;
    -u | --username )
        shift
        accessUsername="$1"
        shift
        ;;
    -p | --password )
        shift
        accessPassword="$1"
        shift
        ;;
    -s | --sbr )
        shift
        SBR="$1"
        shift
        ;;
    -id | --customer-account-id )
        shift
        AccountNum="$1"
        shift
        ;;
    -i | --ignore-case )
        grepOption="-i"
        shift
        ;;
    -f | --filter )
        shift
        filter="$1"
        shift
        ;;
    -l | --limit )
        shift
        limit="$1"
        shift
        ;;
    -h | --help )
        help
        exit
        ;;
    -v | --verbose )
        curlOption="-v"
        shift
        ;;
    * )
        shift
  esac
done

#We try the cached token first
if [ "$quantityOfArgs" -lt "4" ]
then
  help
  exit 0
fi

#####
#https://stackoverflow.com/a/2005658
#####
if [ ! -f ~/.hydratoken ]
then
  retrieveToken
elif [ `stat --format=%Y ~/.hydratoken` -le $(( `date +%s` - 900 )) ]
then 
  retrieveToken
fi

retrieveCaseNumbers

retrieveCaseAttachments

  exit 0
